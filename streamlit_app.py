import streamlit as st
import json
import os
import logging
import queue
from datetime import datetime
from pathlib import Path
import threading

from modules.graphs import build_graph
from modules.states import AgentState

# Thi·∫øt l·∫≠p page
st.set_page_config(
    page_title="PDF Extract",
    page_icon="üìÑ",
    layout="wide"
)

# Kh·ªüi t·∫°o session state
if 'logs' not in st.session_state:
    st.session_state.logs = []

# T·∫°o global log queue ƒë·ªÉ thread-safe
log_queue = queue.Queue()

# Thi·∫øt l·∫≠p logging
class ThreadSafeLogHandler(logging.Handler):
    def __init__(self):
        super().__init__()
    
    def emit(self, record):
        log_entry = self.format(record)
        # S·ª≠ d·ª•ng queue thay v√¨ truy c·∫≠p tr·ª±c ti·∫øp session_state
        log_queue.put(log_entry)

# Kh·ªüi t·∫°o logger
logger = logging.getLogger()
handler = ThreadSafeLogHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(handler)
logger.setLevel(logging.INFO)

# T·∫°o th∆∞ m·ª•c c·∫ßn thi·∫øt
for folder in ["uploads", "outputs", "temp_files", "indices"]:
    Path(folder).mkdir(exist_ok=True)

def save_uploaded_file(uploaded_file):
    """L∆∞u file PDF ƒë∆∞·ª£c upload"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_path = f"uploads/{timestamp}_{uploaded_file.name}"
    
    with open(file_path, "wb") as f:
        f.write(uploaded_file.getbuffer())
    
    return file_path

def get_optimized_prompt():
    """T·∫°o prompt t·ªëi ∆∞u cho vi·ªác tr√≠ch xu·∫•t th√¥ng tin"""
    return """Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng, ch√≠nh x√°c v√† ng·∫Øn g·ªçn t·ª´ t√†i li·ªáu n√†y. 
T·∫≠p trung v√†o:
1. C√°c d·ªØ ki·ªán ch√≠nh (facts) v√† s·ªë li·ªáu quan tr·ªçng
2. T√™n ng∆∞·ªùi, t·ªï ch·ª©c, ƒë·ªãa ƒëi·ªÉm v√† th·ªùi gian ch√≠nh x√°c
3. C√°c m·ªëc th·ªùi gian v√† s·ª± ki·ªán quan tr·ªçng
4. C√°c th√¥ng tin ƒë·ªãnh l∆∞·ª£ng (s·ªë li·ªáu, th·ªëng k√™)

K·∫øt qu·∫£ c·∫ßn:
- Ng·∫Øn g·ªçn, s√∫c t√≠ch, kh√¥ng d√†i d√≤ng
- Ch√≠nh x√°c, trung th·ª±c v·ªõi n·ªôi dung g·ªëc
- C√≥ c·∫•u tr√∫c r√µ r√†ng
- ∆Øu ti√™n th√¥ng tin c√≥ gi√° tr·ªã cao

B·ªè qua c√°c th√¥ng tin:
- Mang t√≠nh ch·ªß quan, ƒë√°nh gi√°
- Th√¥ng tin tr√πng l·∫∑p
- Chi ti·∫øt kh√¥ng quan tr·ªçng
- N·ªôi dung mang t√≠nh qu·∫£ng c√°o"""

def run_extraction(file_path, api_key, model_name, embedding_model):
    """Ch·∫°y qu√° tr√¨nh tr√≠ch xu·∫•t PDF"""
    try:
        # Kh·ªüi t·∫°o state v·ªõi prompt t·ªëi ∆∞u
        initial_state = AgentState(
            file_path=file_path,
            question=get_optimized_prompt(),
            cleaned_text=None,
            chunks=[],
            embeddings=[],
            db="",
            summary=None,
            entities=None,
            verified_data=None,
            report=None,
            error=None,
            messages=[],
            retry_count_a1=0,
            retry_count_a2=0,
            retry_count_analyze=0,
            api_key=api_key,
            model_name=model_name,
            embedding_model=embedding_model
        )
        
        # X√¢y d·ª±ng v√† ch·∫°y graph
        graph = build_graph()
        result = graph.invoke(initial_state)
        
        return result, None
    except Exception as e:
        return None, str(e)

def save_result_json(result, filename):
    """L∆∞u k·∫øt qu·∫£ v√†o file JSON"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_path = f"outputs/{timestamp}_{Path(filename).stem}_result.json"
    
    # Chuy·ªÉn ƒë·ªïi AgentState th√†nh dict
    if hasattr(result, '__dict__'):
        result_dict = {}
        for key in ['file_path', 'cleaned_text', 'chunks', 'embeddings', 'db', 
                   'question', 'summary', 'entities', 'error']:
            if hasattr(result, key):
                result_dict[key] = getattr(result, key)
    else:
        result_dict = result
    
    # T·∫°o output data
    output_data = {
        "timestamp": timestamp,
        "input_file": filename,
        "result": result_dict
    }
    
    with open(output_path, "w", encoding="utf-8") as f:
        json.dump(output_data, f, ensure_ascii=False, indent=2)
    
    return output_path

def main():
    st.title("üìÑ PDF Extract - Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng")
    
    # Sidebar cho c·∫•u h√¨nh
    with st.sidebar:
        st.header("‚öôÔ∏è C·∫•u h√¨nh")
        
        api_key = st.text_input("OpenAI API Key", type="password")
        
        model_options = ["gpt-4-turbo", "gpt-4", "gpt-3.5-turbo", "gpt-4.1-mini"]
        model = st.selectbox("Ch·ªçn Model", model_options, index=0)
        
        embedding_options = ["text-embedding-3-small", "text-embedding-3-large", "text-embedding-ada-002"]
        embedding_model = st.selectbox("Ch·ªçn Embedding Model", embedding_options, index=0)
        
        with st.expander("‚ÑπÔ∏è V·ªÅ c√¥ng c·ª• n√†y"):
            st.write("""
            **PDF Extract** l√† c√¥ng c·ª• multi-agent ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a ƒë·ªÉ:
            - Tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng v√† ch√≠nh x√°c t·ª´ PDF
            - T√≥m t·∫Øt n·ªôi dung m·ªôt c√°ch ng·∫Øn g·ªçn, s√∫c t√≠ch
            - Nh·∫≠n di·ªán entities: t√™n, ƒë·ªãa ƒëi·ªÉm, th·ªùi gian, s·ªë li·ªáu
            - Lo·∫°i b·ªè th√¥ng tin th·ª´a, kh√¥ng quan tr·ªçng
            """)
    
    # Main content
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("Upload PDF")
        
        uploaded_file = st.file_uploader("Ch·ªçn file PDF", type=['pdf'])
        
        if uploaded_file:
            st.success(f"‚úÖ ƒê√£ ch·ªçn: {uploaded_file.name}")
            
            if st.button("üöÄ Extract Th√¥ng Tin Quan Tr·ªçng", type="primary", disabled=not api_key):
                if not api_key:
                    st.error("‚ö†Ô∏è Vui l√≤ng nh·∫≠p API key")
                else:
                    # Reset logs
                    st.session_state.logs = []
                    
                    with st.spinner("ƒêang tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng..."):
                        # L∆∞u file
                        file_path = save_uploaded_file(uploaded_file)
                        
                        # Ch·∫°y extraction v·ªõi c√°c model ƒë∆∞·ª£c ch·ªçn
                        result, error = run_extraction(
                            file_path=file_path,
                            api_key=api_key,
                            model_name=model,
                            embedding_model=embedding_model
                        )
                        
                        # L·∫•y logs t·ª´ queue
                        while not log_queue.empty():
                            try:
                                log_entry = log_queue.get_nowait()
                                st.session_state.logs.append(log_entry)
                            except:
                                break
                        
                        if error:
                            st.error(f"‚ùå L·ªói: {error}")
                        else:
                            # L∆∞u k·∫øt qu·∫£
                            output_path = save_result_json(result, uploaded_file.name)
                            
                            # L∆∞u v√†o session state
                            st.session_state.result = result
                            st.session_state.output_path = output_path
                            
                            st.success("‚úÖ Tr√≠ch xu·∫•t th√†nh c√¥ng!")
                            st.balloons()
        else:
            st.info("üëÜ Vui l√≤ng upload file PDF ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t th√¥ng tin quan tr·ªçng")
    
    with col2:
        st.header("K·∫øt qu·∫£ tr√≠ch xu·∫•t")
        
        # C·∫≠p nh·∫≠t logs t·ª´ queue
        while not log_queue.empty():
            try:
                log_entry = log_queue.get_nowait()
                st.session_state.logs.append(log_entry)
            except:
                break
        
        # Hi·ªÉn th·ªã logs
        if st.session_state.logs:
            with st.expander("üìã Logs", expanded=False):
                for log in st.session_state.logs[-20:]:
                    st.text(log)
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        if 'result' in st.session_state and st.session_state.result:
            result = st.session_state.result
            
            # L·∫•y data t·ª´ result
            if hasattr(result, 'summary'):
                summary = result.summary
                entities = result.entities
            else:
                summary = result.get('summary')
                entities = result.get('entities', {})
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            tab1, tab2, tab3 = st.tabs(["üìù Th√¥ng tin quan tr·ªçng", "üè∑Ô∏è Entities", "üìÑ Raw Data"])
            
            with tab1:
                if summary:
                    st.markdown("### Th√¥ng tin quan tr·ªçng")
                    st.write(summary)
                else:
                    st.info("Ch∆∞a c√≥ th√¥ng tin ƒë∆∞·ª£c tr√≠ch xu·∫•t")
            
            with tab2:
                if entities:
                    st.markdown("### Entities ƒë√£ tr√≠ch xu·∫•t")
                    
                    # Hi·ªÉn th·ªã c√°c lo·∫°i entities
                    for entity_type, icon in [
                        ('names', 'üë§'), 
                        ('dates', 'üìÖ'), 
                        ('locations', 'üìç'),
                        ('numbers', 'üî¢')
                    ]:
                        if entity_type in entities and entities[entity_type]:
                            st.write(f"**{icon} {entity_type.capitalize()}:**")
                            for item in entities[entity_type]:
                                st.write(f"- {item}")
                else:
                    st.info("Kh√¥ng c√≥ entities")
            
            with tab3:
                st.markdown("### Raw Data")
                
                # Convert to dict if needed
                if hasattr(result, '__dict__'):
                    result_dict = {}
                    for key in ['summary', 'entities', 'cleaned_text']:
                        if hasattr(result, key):
                            result_dict[key] = getattr(result, key)
                    st.json(result_dict)
                else:
                    st.json(result)
            
            # Download button
            if 'output_path' in st.session_state:
                try:
                    with open(st.session_state.output_path, 'r', encoding='utf-8') as f:
                        json_data = f.read()
                    
                    st.download_button(
                        "üì• Download K·∫øt Qu·∫£ (JSON)",
                        json_data,
                        file_name=f"extracted_info_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                        mime="application/json"
                    )
                except Exception as e:
                    st.error(f"L·ªói t·∫£i file: {str(e)}")
        else:
            st.info("üëà Upload file v√† nh·∫•n Extract ƒë·ªÉ xem th√¥ng tin quan tr·ªçng ƒë∆∞·ª£c tr√≠ch xu·∫•t")

if __name__ == "__main__":
    main() 