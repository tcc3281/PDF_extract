#!/usr/bin/env python3
"""
Setup script cho PDF Extract Multi-Agent System
Ki·ªÉm tra v√† c√†i ƒë·∫∑t dependencies t·ª± ƒë·ªông
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command):
    """Ch·∫°y command v√† tr·∫£ v·ªÅ k·∫øt qu·∫£"""
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except Exception as e:
        return False, "", str(e)

def check_python_version():
    """Ki·ªÉm tra Python version"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå Python 3.8+ required")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def install_requirements():
    """C√†i ƒë·∫∑t requirements"""
    print("üì¶ C√†i ƒë·∫∑t dependencies...")
    
    # Upgrade pip first
    success, stdout, stderr = run_command(f"{sys.executable} -m pip install --upgrade pip")
    if not success:
        print(f"‚ö†Ô∏è Warning: Could not upgrade pip: {stderr}")
    
    # Install requirements
    success, stdout, stderr = run_command(f"{sys.executable} -m pip install -r requirements.txt")
    if not success:
        print(f"‚ùå Error installing requirements: {stderr}")
        return False
    
    print("‚úÖ Dependencies installed successfully")
    return True

def check_dependencies():
    """Ki·ªÉm tra conflicts trong dependencies"""
    print("üîç Ki·ªÉm tra conflicts...")
    success, stdout, stderr = run_command(f"{sys.executable} -m pip check")
    if not success:
        print(f"‚ö†Ô∏è Dependency conflicts found: {stderr}")
        return False
    
    print("‚úÖ No dependency conflicts found")
    return True

def create_directories():
    """T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt"""
    print("üìÅ T·∫°o th∆∞ m·ª•c...")
    directories = ["uploads", "outputs", "temp_files", "indices"]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"  ‚úÖ {directory}/")
    
    return True

def check_environment():
    """Ki·ªÉm tra environment variables"""
    print("üîç Ki·ªÉm tra environment...")
    
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ÑπÔ∏è T·∫°o file .env template...")
        with open(env_file, "w") as f:
            f.write("# OpenAI API Configuration\n")
            f.write("OPENAI_API_KEY=your_api_key_here\n")
            f.write("MODEL_NAME=gpt-4o-mini\n")
        print("  ‚úÖ .env template created")
    else:
        print("  ‚úÖ .env file exists")
    
    return True

def main():
    """Main setup function"""
    print("üöÄ PDF Extract Multi-Agent System Setup")
    print("=" * 50)
    
    # Check Python version
    if not check_python_version():
        sys.exit(1)
    
    # Check if requirements.txt exists
    if not Path("requirements.txt").exists():
        print("‚ùå requirements.txt not found")
        sys.exit(1)
    
    # Install requirements
    if not install_requirements():
        sys.exit(1)
    
    # Check dependencies
    if not check_dependencies():
        print("‚ö†Ô∏è Warning: Dependency conflicts detected")
    
    # Create directories
    create_directories()
    
    # Check environment
    check_environment()
    
    print("\n" + "=" * 50)
    print("‚úÖ Setup completed successfully!")
    print("\nNext steps:")
    print("1. Add your OpenAI API key to .env file")
    print("2. Run: streamlit run streamlit_app.py")
    print("3. Or run: python main.py --help for CLI usage")

if __name__ == "__main__":
    main() 